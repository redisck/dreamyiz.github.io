// Set file variable
$filename: 'scss/blocks/_tabs.scss';

////////////////////////////////////////////////////////////////////////////////
// @Tabs Map
////////////////////////////////////////////////////////////////////////////////

$tabs: (
  'classes' : true,

  'class-wrapper'       : 'tabs',
  'class-nav'           : 'tabs-nav',
  'class-content'       : 'tabs-content',
  'class-content-panel' : 'tabs-panel',

  'margin'             : 2em 0,
  'padding-nav'        : 1em,
  'padding-nav-inline' : 1em 2em,
  'padding-content'    : 1em 2em,

  'background'        : $gray-100,
  'background-fade'   : $gray-200,
  'background-accent' : $white,

  'border'            : 1px solid $gray-300,
  'border-radius'     : $border-radius,

  'color'        : $color,
  'color-fade'   : $color-light,
  'color-accent' : $blue,

  'transition' : null,

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'tabs') == true) {
    $tabs: map-extend($tabs, map-get($override, 'tabs'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Tabs Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Tabs
// Creates the base styles for a the tabs block including tab wrapper,
// navigation and content.
// @param $options
//   @type map
//   @default $tabs map
@mixin make-tabs($options: ()) {
  $o: map-merge($tabs, $options);

  // Tab Wrapper
  .#{map-get($tabs, 'class-wrapper')} {
    position: relative;
    margin: map-get($o, 'margin');

    .#{map-get($o, 'class-nav')},
    .#{map-get($o, 'class-content')} {
      margin: 0;
    }
    .#{map-get($o, 'class-nav')} {
      z-index: 10;
    }
    .#{map-get($o, 'class-content')} {
      z-index: 5;
    }
  }

  // Tab Navigation
  .#{map-get($tabs, 'class-nav')} {
    margin: map-get($o, 'margin');
    text-align: center;

    ul {
      display: flex;
      list-style: none;
      margin: 0;
    }
    ul li {
      flex: 1 0 auto;
      margin: 0;
    }
    a {
      display: block;
      padding: map-get($o, 'padding-nav');
      border: none;
    }

    &.inline {
      ul {
        flex-wrap: wrap;
      }
      ul li {
        flex: 0 0 auto;

        a {
          padding: map-get($o, 'padding-nav-inline');
        }
      }
    }
  }

  // Tab Content
  .#{map-get($tabs, 'class-content')} {
    margin: map-get($o, 'margin');

    .#{map-get($o, 'class-content-panel')} {
      display: none;
    }
    .#{map-get($o, 'class-content-panel')}.active {
      display: block;
    }
  }

}

// Add Tab Style
// Creates the styles for tabs.
// @param $options
//   @type map
//   @default $tabs map
// @param $style
//   @type string ('fold', 'line')
//   @default 'fold'
// @param $class
//   @type string
//   @default 'style-#{$style}'
@mixin add-tab-style($options: (), $style: 'fold', $class: null) {
  $o: map-merge($tabs, $options);

  @if ($class == null) {
    $class: 'style-#{$style}';
  }

  @if ($style == 'fold') {

    .#{$class} .#{map-get($o, 'class-nav')},
    .#{map-get($o, 'class-nav')}.#{$class} {
      ul {
        background: map-get($o, 'background');
        border: map-get($o, 'border');
        @include border-radius(map-get($o, 'border-radius'));
      }
      ul li {
        border-right: map-get($o, 'border');
        @if (map-get($o, 'transition') != null) {
          @include transition(map-get($o, 'transition'));
        }

        &:first-child {
          @include border-radius-left(map-get($o, 'border-radius'));
        }
        &:last-child {
          border-right: none;
          @include border-radius-right(map-get($o, 'border-radius'));
        }
      }
      a {
        color: map-get($o, 'color');
        @if (map-get($o, 'transition') != null) {
          @include transition(map-get($o, 'transition'));
        }

        &:hover {
          background: map-get($o, 'background-fade');
          color: map-get($o, 'color');
          text-decoration: none;
        }
      }

      // Active State
      ul li.active {
        background: map-get($o, 'background-accent');
      }
      .active a {
        color: map-get($o, 'color');
        &:hover {
          background: map-get($o, 'background-accent');
        }
      }

      // Inline styles
      &.inline ul li:last-child {
        border-right: map-get($o, 'border');
      }
    }
    .#{$class} .#{map-get($o, 'class-nav')} {
      ul {
        @include border-radius-bottom(0);
      }
      ul li {
        border-bottom: 1px solid transparent;
        margin-bottom: -1px;
      }
      ul li:first-child {
        @include border-radius-bottom-left(0);
      }
      ul li:last-child {
        @include border-radius-bottom-right(0);
      }
      ul li.active {
        border-bottom: 1px solid map-get($o, 'background-accent');
      }
    }
    .#{$class} .#{map-get($o, 'class-content')} {
      padding: map-get($o, 'padding-content');
      border: map-get($o, 'border');
      border-top: none;
      @include border-radius-bottom(map-get($o, 'border-radius'));
    }

  } @else if ($style == 'line') {

    .#{$class} .#{map-get($o, 'class-nav')},
    .#{map-get($o, 'class-nav')}.#{$class} {
      ul {
        border-bottom: map-get($o, 'border');
      }
      ul li {
        border-bottom: 3px solid transparent;
        margin-bottom: -1px;
        @if (map-get($o, 'transition') != null) {
          @include transition(map-get($o, 'transition'));
        }
      }
      a {
        color: map-get($o, 'color-fade');
        @if (map-get($o, 'transition') != null) {
          @include transition(map-get($o, 'transition'));
        }
        &:hover {
          color: map-get($o, 'color-accent');
          text-decoration: none;
        }
      }
      // Active State
      ul li.active {
        border-bottom: 3px solid map-get($o, 'color-accent');
      }
      .active a {
        color: map-get($o, 'color');
        &:hover {
          color: map-get($o, 'color-accent');
        }
      }
    }
    .#{$class} .#{map-get($o, 'class-content')} {
      padding: map-get($o, 'padding-content');
      border: map-get($o, 'border');
      border-top: none;
    }

  } @else {
    @warn 'The tabs style of `#{$style}` does not exist';
  }
}

// Check if we should output modifier classes
@if (map-get($tabs, 'classes') == true) {

/*==============================================================================
  @Tabs - #{$filename}
==============================================================================*/

/**
 * Base styles for tab wrapper, nav and content
 */
@include make-tabs();

/**
 * Tabs Style: Fold
 */
@include add-tab-style($style: 'fold');

/**
 * Tabs Style: Line
 */
@include add-tab-style($style: 'line');

} // endif classes
