// Set file variable
$filename: 'scss/blocks/_breadcrumb.scss';

////////////////////////////////////////////////////////////////////////////////
// @Breadcrumbs Map
////////////////////////////////////////////////////////////////////////////////

$breadcrumbs: (
  'classes' : true,

  'class-item' : 'item',
  'class-active' : 'active',
  'class-current' : 'current',

  'margin' : 1em 0,
  'padding' : 0.5em 1em,

  'font-size' : 1em,

  'color' : null,
  'color-hover' : null,
  'color-current' : $color-light,
  'text-shadow' : null,

  'background' : $blue-50,
  'border' : 1px solid rgba($black, 0.1),
  'border-radius' : $border-radius,

  // Delimiter Styles
  'delimiter' : '/', // Delimiter element content (e.g: '/', '—', '→', '»').
  'delimiter-padding' : 0 0.75em,
  'delimiter-color' : $gray-400,
  'delimiter-end' : false, // Whether or not to show delimiter on last item.

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'breadcrumbs') == true) {
    $breadcrumbs: map-extend($breadcrumbs, map-get($override, 'breadcrumbs'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Breadcrumb Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Breadcrumb
// Creates the basic breadcrumb styles.
// @param $options
//   @type map
//   @default $breadcrumbs map
@mixin make-breadcrumb($options: ()) {
  $o: map-merge($breadcrumbs, $options);

  display: block;
  margin: map-get($o, 'margin');
  font-size: map-get($o, 'font-size');

  // Remove default list styles
  ul,
  ol {
    margin: 0;
    list-style: none;
    @include clearfix();
  }

  // Float list items to the left to:
  //   a) Get rid of the extra white spacing from inline items.
  //   b) Wrap properly if items don't fit on one line.
  li {
    float: left;
    margin: 0;
  }

  // Remove link borders and add link color styles
  li a {
    color: map-get($o, 'color');
    text-shadow: map-get($o, 'text-shadow');
    border: 0 none;

    &:hover {
      color: map-get($o, 'color-hover');
    }
  }

  // Current item styles
  .#{map-get($o, 'class-current')} {
    color: map-get($o, 'color-current');
  }

  // Delimiter styles
  li:after {
    content: map-get($o, 'delimiter');
    padding: map-get($o, 'delimiter-padding');
    color: map-get($o, 'delimiter-color');
  }

  // Remove last delimiter if `delimiter-end` is set to false
  @if (map-get($o, 'delimiter-end') == false) {
    li:last-child:after {
      content: none;
    }
  }
}

// Add Breadcrumb Wrapped
// Applies custom styles to breadcrumb wrapper.
// @param $options
//   @type map
//   @default $breadcrumbs map
@mixin add-breadcrumb-wrapped($options: ()) {
  $o: map-merge($breadcrumbs, $options);

  // Add styles for the wrapper element.
  padding: map-get($o, 'padding');
  background: map-get($o, 'background');
  border: map-get($o, 'border');
  @include border-radius(map-get($o, 'border-radius'));
}

// Check if we should output modifier classes
@if (map-get($breadcrumbs, 'classes') == true) {

/*==============================================================================
  @Breadcrumb - #{$filename}
==============================================================================*/

.breadcrumb {
  @include make-breadcrumb();
}

.breadcrumb.wrapped {
  @include add-breadcrumb-wrapped();
}

} // endif classes
